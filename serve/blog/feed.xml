<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>inchworms</title>
		<description>Summer of Coding, one inch at a time...</description>
		<link>http://inchworms.net</link>
		<atom:link href="http://inchworms.net/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>kitchenoffice</title>
				<description>&lt;p&gt;Today we had to sort out a lot of things (planing the last weeks), baking a Travis cake and add a new table to our database and all in Anja&amp;#39;s kitchen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kitchenoffice.jpg&quot; alt=&quot;kitchenoffice&quot;&gt;&lt;/p&gt;

&lt;p&gt;We wrote a new migration:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;Sequel.migration do
  change do
    create_table(:payment_year_totals) do
      primary_key :id
      BigDecimal :amount_euro
      foreign_key(:year_id, :years)
      foreign_key(:recipient_id, :recipients)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and a rake task:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;task :run_any_new_migration do
    require &amp;quot;sequel&amp;quot;
    Sequel.extension :migration

    DB = Sequel.postgres(&amp;quot;farmsubsidy_performance&amp;quot;)
    Sequel::Migrator.run(DB, &amp;#39;./db/migrations&amp;#39;, :use_transactions=&amp;gt;true)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and ruby code to populate it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;require &amp;#39;rubygems&amp;#39;
require &amp;#39;sequel&amp;#39;
require &amp;#39;logger&amp;#39;


# connect to an in-memory database
DB = Sequel.postgres(&amp;quot;farmsubsidy_performance&amp;quot;, :loggers =&amp;gt; [Logger.new($stdout)])

# connect to the models
project_root = File.dirname(File.absolute_path(__FILE__))
Dir.glob(project_root + &amp;quot;/models/*.rb&amp;quot;).each{|f| require f}

# connect to payments total table and add data to the database
total_payment = DB[:payment_year_totals]

# look through all recipients and all years and insert the total amount
Recipient.all.each do |recipient|
  Year.all.each do |year|
    total = recipient.total_payment_amount_by_year(year.year)
    #make sure the total isn&amp;#39;t 0
    if total != 0.0
      total_payment.insert(
        recipient_id: recipient.id,
        year_id: year.id,
        amount_euro: total
        )
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and now we have a new database with all the recipients and the total payment per year. Yeah!&lt;/p&gt;
</description>
				<pubDate>Fri Sep 09 2013 15:00</pubDate>
				<link>http://inchworms.net/blog/2013-09-09-kitchenoffice</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-09-09-kitchenoffice</guid>
			</item>
		
			<item>
				<title>Upgrade</title>
				<description>&lt;p&gt;Steps to upgrade your HDD to an SSD:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prepare a bootable USB drive with Ubuntu system on it (instructions available on Ubuntu website)&lt;/li&gt;
&lt;li&gt;get rid of everything you don&amp;#39;t want on your current drive (including Google Chrome caches)&lt;/li&gt;
&lt;li&gt;empty the trash&lt;/li&gt;
&lt;li&gt;log out of the graphical interface&lt;/li&gt;
&lt;li&gt;change to a text console (ctrl + alt + F1)&lt;/li&gt;
&lt;li&gt;login with username and sudo password&lt;/li&gt;
&lt;li&gt;switch to root user (&lt;strong&gt;$ sudo -i&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;find out how big the home folder is (&lt;strong&gt;# du -sh/home/username&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;find all the disks on the machine and their usage (&lt;strong&gt;# df -h&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;go to home directory (&lt;strong&gt;# cd /home&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;check present working directory (&lt;strong&gt;# pwd&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;check what is in directory (&lt;strong&gt;# ls&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;zip the folder (&lt;strong&gt;# tar czvf backup_home.tgz username/&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;if the screen goes black at any stage during the compression press the SHIFT key to wake the screen up&lt;/li&gt;
&lt;li&gt;once the archive is complete copy this to an external drive&lt;/li&gt;
&lt;li&gt;ctrl + d to exit the root user&lt;/li&gt;
&lt;li&gt;ctrl + d to exit the text console session&lt;/li&gt;
&lt;li&gt;shut down the computer&lt;/li&gt;
&lt;li&gt;take out the old HDD (making note of orientation as you pull it out)&lt;/li&gt;
&lt;li&gt;unscrew HDD from casing and put SSD drive in casing&lt;/li&gt;
&lt;li&gt;put SSD drive into computer&lt;/li&gt;
&lt;li&gt;put bootable USB w Ubuntu install into USB port&lt;/li&gt;
&lt;li&gt;start computer (you may need to enter BIOS to configure computer to boot from USB drive)&lt;/li&gt;
&lt;li&gt;follow instructions to install Ubuntu from USB drive&lt;/li&gt;
&lt;li&gt;once installed log in&lt;/li&gt;
&lt;li&gt;log out&lt;/li&gt;
&lt;li&gt;restart computer (remove USB drive when computer is off and before it restarts)&lt;/li&gt;
&lt;li&gt;log in and check for system updates&lt;/li&gt;
&lt;li&gt;download and install updates&lt;/li&gt;
&lt;li&gt;restart&lt;/li&gt;
&lt;li&gt;put your old HDD into the USB casing you purchased when buying your SSD&lt;/li&gt;
&lt;li&gt;if your HDD and new SSD drive have the same version of Ubuntu you can copy the contents of your old home directory directly to your new home directory&lt;/li&gt;
&lt;li&gt;plug the HDD drive into a USB port&lt;/li&gt;
&lt;li&gt;log out of graphical interface&lt;/li&gt;
&lt;li&gt;open text console and log in&lt;/li&gt;
&lt;li&gt;become root user (&lt;strong&gt;$ sudo -i&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;navigate to home directory (&lt;strong&gt;# cd /home&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;check the &lt;username&gt; of home folder to rename (&lt;strong&gt;# ls&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;move username folder to new folder(&lt;strong&gt;# mv username ssd_username&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;find location of old HHD home folder&lt;/li&gt;
&lt;li&gt;sync home username folder on HDD with home username folder on SSD&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;# rsync -Pav path-to-old-home-folder name-of-new-home-folder&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;then sudo install git and curl&lt;/li&gt;
&lt;li&gt;install rvm&lt;/li&gt;
&lt;li&gt;sudo install postgres 

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sudo apt-get install postgresql&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sudo -u postgres createuser --superuser $USER&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sudo apt-get install libpq-dev&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;install whatever other applications and configurations you were using before (if they haven&amp;#39;t been saved in your original home folder)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Viola!! Watch your databases populate a squillion times faster :-)&lt;/p&gt;
</description>
				<pubDate>Thu Sep 05 2013 18:04</pubDate>
				<link>http://inchworms.net/blog/2013-09-05-upgrade</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-09-05-upgrade</guid>
			</item>
		
			<item>
				<title>Sequel Models</title>
				<description>&lt;p&gt;Today we created model classes for each of our database tables. It was way easier than we expected and required just a single line: &lt;strong&gt;class Year &amp;lt; Sequel::Model; end&lt;/strong&gt;. Sometimes reading the documentation yields quicker-than-expected results!!&lt;/p&gt;

&lt;p&gt;Then, after adding associations between the classes (such as &lt;strong&gt;one-to-many :recipients&lt;/strong&gt;) we were able to dig around our dataset objects and look at (for example) what methods were available to what objects. &lt;strong&gt;payments_sorted.all.first.values.methods&lt;/strong&gt; returned a different list of available methods to &lt;strong&gt;payments_sorted.all.methods&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We also worked out how to see what columns an object contained, and how to add a new key/value combination to it. &lt;/p&gt;

&lt;p&gt;Tomorrow we&amp;#39;re both installing SSDs into our laptops. This &lt;em&gt;may&lt;/em&gt; mean our computers will be out-of-action at the end of the day, so we may not be able to post here tomorrow...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ssd.jpg&quot; alt=&quot;ssd&quot;&gt;&lt;/p&gt;
</description>
				<pubDate>Wed Sep 04 2013 17:11</pubDate>
				<link>http://inchworms.net/blog/2013-09-04-sequel-models</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-09-04-sequel-models</guid>
			</item>
		
			<item>
				<title>The Technique of Shoving</title>
				<description>&lt;p&gt;Today we continued working with our test data, making decisions about what we wanted to show and the data structure we would need to build. Our first objective was to show a bar chart of the top 20 subsidy recipients by year.&lt;/p&gt;

&lt;p&gt;First step: retrieve the relevant data and &amp;quot;shove&amp;quot; it into a ruby hash.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    require &amp;#39;csv&amp;#39;
    require &amp;#39;rubygems&amp;#39;
    require &amp;#39;sequel&amp;#39;
    require &amp;#39;logger&amp;#39;

    # top_payments will be an aray of hashes with the final results
    # eg [{rank: 1, name: &amp;quot;horst&amp;quot;, amount: 234556}, {...}]
    top_payments = []

    # connect to an in-memory database
    DB = Sequel.postgres(&amp;quot;farmsubsidy_performance&amp;quot;, :loggers =&amp;gt; [Logger.new($stdout)])

    #select a year between 2004 and 2011
    p &amp;quot;Select a year between 2004 and 2011:&amp;quot;
    year_selection = gets

    # find the year_id from the years table
    year_id = DB[:years].where(year: year_selection.to_i).first[:id]

    # find payments by year, order them by amount, and return the first 20
    payments_sorted = DB[:payments].where(year_id: year_id).reverse_order(:amount_euro).limit(20)

    # find recipient name, create an index, shove it into top_payments hash
    payments_sorted.each_with_index do |payment, index|
        recipient_name = DB[:recipients].where(id: payment[:recipient_id]).first[:name].gsub(&amp;quot;\&amp;quot;&amp;quot;, &amp;quot;&amp;quot;)
        top_payments &amp;lt;&amp;lt; {rank: index+1, name: recipient_name, amount: payment[:amount_euro]}
    end

    p top_payments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, use the hash to create a CSV file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    CSV.open(&amp;quot;top_payments.csv&amp;quot;, &amp;quot;w&amp;quot;, :force_quotes =&amp;gt; true) do |csv|
      i = 0
      csv &amp;lt;&amp;lt; [&amp;quot;rank&amp;quot;,&amp;quot;name&amp;quot;,&amp;quot;amount&amp;quot;]
      while i &amp;lt; top_payments.length
        csv &amp;lt;&amp;lt; [top_payments[i][:rank],top_payments[i][:name],top_payments[i][:amount].to_i]
        i += 1
      end
    end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, write some &lt;a href=&quot;https://github.com/inchworms/farmsubsidy/blob/master/index.html&quot;&gt;d3 code&lt;/a&gt; to parse the csv file and display the data like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/czech_bar.png&quot; alt=&quot;horizontal_bar&quot;&gt;&lt;/p&gt;

&lt;p&gt;It made us feel like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dancing.gif&quot; alt=&quot;dancing&quot;&gt;&lt;/p&gt;
</description>
				<pubDate>Tue Sep 02 2013 17:11</pubDate>
				<link>http://inchworms.net/blog/2013-09-02-shoving</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-09-02-shoving</guid>
			</item>
		
			<item>
				<title>Can We Live Without You?</title>
				<description>&lt;p&gt;Today we moved from the 5th floor offices of &lt;a href=&quot;https://twitter.com/travisci&quot;&gt;TravisCI&lt;/a&gt; to the 5th floor offices of &lt;a href=&quot;https://twitter.com/co_up&quot;&gt;Co-Up&lt;/a&gt;. We cried, but not from all the stairs we had to climb. We cried because we didn&amp;#39;t wanna say goodbye :-(&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://24.media.tumblr.com/tumblr_m87b30INY21r0uywso1_500.gif&quot; alt=&quot;crying&quot;&gt;&lt;/p&gt;

&lt;p&gt;But, as they say, when one door closes, another one opens. Pretty soon our new desk was set up, our coach Urs had assigned us several challenging tasks, and, along with Urs&amp;#39; colleague Adam, shared a delicious salad for lunch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/before.jpg&quot; alt=&quot;before&quot;&gt;
&lt;img src=&quot;/images/after.jpg&quot; alt=&quot;after&quot;&gt;&lt;/p&gt;

&lt;p&gt;Mostly today was spent working on setting up a rake task that would create a seperate database we will use to test the performance of our data viz appliaction. Because we wanted our rake task to: look for a performance test database, delete it if there was one, then/or create a new performance test database - we had to work out how we could access (unix) system commands and which ones would return something we could use to check the presence of the performance test db. This took AGES.&lt;/p&gt;

&lt;p&gt;Tomorrow we&amp;#39;re going to look at caching the contents of one of our (small) tables locally to improve performance further.&lt;/p&gt;
</description>
				<pubDate>Mon Sep 01 2013 17:50</pubDate>
				<link>http://inchworms.net/blog/2013-09-01-without-you</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-09-01-without-you</guid>
			</item>
		
			<item>
				<title>Setting up Our Database</title>
				<description>&lt;p&gt;If the thought of setting up databases provokes this response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/freakedmatt.jpg&quot; alt=&quot;freaked matt&quot; style=&quot;width: 300px;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;FEAR NOT!!! &lt;/p&gt;

&lt;p&gt;Follow these simple steps instead:&lt;/p&gt;

&lt;p&gt;(This is what we did to set up the (development) database we&amp;#39;ll be using for our Farmsubsidy project).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Map out the basic data model on a piece of paper, including the relationships between each dataset/table (i.e. one to many, must have, zero or more).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Normalise (to get rid of repetition) or De-Normalise (to put it back when removing it is actually not totally logical or necessary)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a migration file. Name this using the Rails convention: date&amp;amp;timestamp_migration.rb. Store this file in db/migrations/ directory of your application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write the migration in Sequel, creating tables in the order required for any foreign keys between tables to compute.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a Rakefile. Write the migration methods here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In terminal create the database (if you haven&amp;#39;t already): &lt;strong&gt;createdb databaseName&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a Gemfile that includes all required gems (in this case &amp;#39;sequel&amp;#39;, &amp;#39;rake&amp;#39;, and &amp;#39;pg&amp;#39;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In terminal run &lt;strong&gt;bundle install&lt;/strong&gt; to install the required gems localy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In terminal run &lt;strong&gt;rake db:migrate&lt;/strong&gt; to run the migration and create all the tables in the database.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then enjoy wearing your DataBase forehead sticker with pride:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/matt.jpg&quot; alt=&quot;cheeky matt&quot; style=&quot;width: 400px;&quot;/&gt;&lt;/p&gt;
</description>
				<pubDate>Fri Aug 30 2013 16:04</pubDate>
				<link>http://inchworms.net/blog/2013-08-30-database</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-08-30-database</guid>
			</item>
		
			<item>
				<title>We're Just Printing Dots Today</title>
				<description>&lt;p&gt;With Matt&amp;#39;s help we refactored our csv parsing to make it run quicker. We included something Matt likes to do, which is printing a dot every 100 rows. As a consequence, when we ran the file, our screens slowly filled with dots. Actually our screens filled wayyyyyyyyyy more slowly than Matt&amp;#39;s. What took us 3,000 seconds took Matt a mere 175 seconds. We put this down to his SSD. We want an upgrade!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dots.png&quot; alt=&quot;dots&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now we have all the Czech Republic payment data saved into our database. Hurá!!!&lt;/p&gt;
</description>
				<pubDate>Thu Aug 29 2013 15:00</pubDate>
				<link>http://inchworms.net/blog/2013-08-29-printing-dots</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-08-29-printing-dots</guid>
			</item>
		
			<item>
				<title>We're Just Printing Dots Today</title>
				<description>&lt;p&gt;With Matt&amp;#39;s help we refactored our csv parsing to make it run quicker. We included something Matt likes to do, which is printing a dot every 100 rows. As a consequence, when we ran the file, our screens slowly filled with dots. Actually our screens filled wayyyyyyyyyy more slowly than Matt&amp;#39;s. What took us 3,000 seconds took Matt a mere 175 seconds. We put this down to his SSD. We want an upgrade!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dots.png&quot; alt=&quot;dots&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now we have all the Czech Republic payment data saved into our database. Hurá!!!&lt;/p&gt;
</description>
				<pubDate>Thu Aug 29 2013 15:00</pubDate>
				<link>http://inchworms.net/blog/2013-08-29-dots</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-08-29-dots</guid>
			</item>
		
			<item>
				<title>Busy Monday</title>
				<description>&lt;p&gt;Today was a busy day at the Travis CI office. Not only did Sebastian and Gareth make an appearence (they&amp;#39;ve been out of town over summer), but &lt;a href=&quot;https://twitter.com/juliaguar&quot;&gt;Julia&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/carolina&quot;&gt;Carolina&lt;/a&gt; (aka RGSoC &lt;a href=&quot;http://teamd.postach.io/&quot;&gt;Team D*&lt;/a&gt;) came to work in the office.&lt;/p&gt;

&lt;iframe src=&quot;http://loopc.am/CarlaD/loops/team-d-rgsoc.widget&quot; width=&quot;340&quot; height=&quot;390&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;We spent the morning looking through our completed Sinatra tests and editing the names of any test descriptions that weren&amp;#39;t very clear. In some cases this required reminding ourselves of what the test actually did. Carla earn&amp;#39;t herself a 15% More Fun forehead sticker by exploring what &lt;strong&gt;params[:agent]&lt;/strong&gt; returned in the test below (it &amp;#39;captures&amp;#39; the relevant part of the User-Agent header, which in this case is &amp;#39;World&amp;#39;).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;context &amp;#39;makes captures in user agent pattern available in params[:agent]&amp;#39; do
    let(:app) do
        Sinatra.new do
            user_agent(/Baz (.*)/)
            get(&amp;#39;/foo&amp;#39;){&amp;#39;Hello &amp;#39; + params[:agent].first}
        end
    end

    it &amp;quot;get /foo &amp;amp; HTTP_USER_AGENT = Foo Bar returns correct body&amp;quot; do
        response = get &amp;#39;/foo&amp;#39;, {}, {&amp;#39;HTTP_USER_AGENT&amp;#39; =&amp;gt; &amp;#39;Baz World&amp;#39;}
        expect(response.body).to be == &amp;quot;Hello World&amp;quot;
    end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;She was happy - especially as she remembered what a &amp;#39;capture&amp;#39; in a regular expression was. (Matt explained it last week. It&amp;#39;s about identifying what the important part to identify is, which you indicate by surrounding with brackets).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/15percentmorefun.jpg&quot; alt=&quot;15 % more fun sticker&quot;&gt;&lt;/p&gt;

&lt;p&gt;Work continued into the afternoon.&lt;/p&gt;

&lt;p&gt;Then Konstantin returned from his adventures in North America. We were excited to see him and hear about the &lt;a href=&quot;http://images.teamsugar.com/files/upl1/0/6066/06_2009/ddc9df2303ce0fa6_DSC09174.jpg&quot;&gt;french-fry sandwiches&lt;/a&gt; his colleagues in Pittsburgh fed him.&lt;/p&gt;

&lt;p&gt;We also liked his unequivocal praise (naturlich):&lt;/p&gt;

&lt;iframe width=&quot;360&quot; height=&quot;510&quot; src=&quot;//www.youtube.com/embed/Y5uFDxv2z-g?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
</description>
				<pubDate>Mon Aug 26 2013 16:09</pubDate>
				<link>http://inchworms.net/blog/2013-08-26-busy-monday</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-08-26-busy-monday</guid>
			</item>
		
			<item>
				<title>What's Hard</title>
				<description>&lt;p&gt;Carla: &amp;quot;Do you know what’s really hard?&amp;quot;&lt;/br&gt;
Anja: &amp;quot;No.&amp;quot;&lt;/br&gt;
Carla: &amp;quot;What&amp;#39;s really hard is how hard it is to keep thinking so hard all the time.&amp;quot;&lt;/br&gt;&lt;/p&gt;

&lt;iframe src=&quot;http://loopc.am/bioshrimp/loops/headdesking-hard.widget&quot; width=&quot;340&quot; height=&quot;390&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;With a screen that looked like this most of the day no wonder our brains were hurting.&lt;/p&gt;

&lt;iframe src=&quot;http://loopc.am/tyranja/loops/15.widget&quot; width=&quot;340&quot; height=&quot;390&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Anja eventually worked out a solution to one of our problemos, earning herself a special Grumpy Carla forehead sticker. (&lt;a href=&quot;http://inchworms.net/images/grumpycarla.jpg&quot;&gt;Grumpy Carla © Bioshrimp 2013&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/anja_sticker.jpg&quot; alt=&quot;anja_sticker&quot; style=&quot;width: 300px;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;And a BIG thanks to our amazing coach &lt;a href=&quot;https://twitter.com/fidothe&quot;&gt;Matt&lt;/a&gt;. He&amp;#39;s not only a champ with Sinatra, he also knows his way around d3. We are impressed!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://weknowgifs.com/wp-content/uploads/2013/05/mexican-soccer-coach-super-saiyan-gif.gif&quot; alt=&quot;supercoach&quot;&gt;&lt;/p&gt;
</description>
				<pubDate>Fri Aug 23 2013 15:30</pubDate>
				<link>http://inchworms.net/blog/2013-08-23-whats-hard</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-08-23-whats-hard</guid>
			</item>
		
	</channel>
</rss>