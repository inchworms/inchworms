<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>inchworms</title>
		<description>Summer of Coding, one inch at a time...</description>
		<link>http://inchworms.net</link>
		<atom:link href="http://inchworms.net/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>An inchworm in Cologne</title>
				<description>&lt;p&gt;During the weekend, I went to the Railscamp in &lt;a href=&quot;http://2013.railscamp.de/&quot;&gt;Cologne&lt;/a&gt;. It took place in the adventures halls (appropriate name) and was a great mixture of coding and doing sports. Or playing with the waterpistol. Or talking to people. Or watching the quatrocopters... Actually there were lots to do.&lt;/p&gt;

&lt;p&gt;First thing I did was learning how to secure a climber and how to climb myself. Pretty exciting to be up there and the rope is being hold by someone who does that the first time.
&lt;a href=&quot;/images/climb_with_me.jpg&quot;&gt;Bettina can&amp;#39;t get enough&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sabrina(https://twitter.com/sabrna) and Bettina(https://twitter.com/ThatBettina) from the &lt;a href=&quot;https://github.com/rubymonsters&quot;&gt;rubymonsters&lt;/a&gt; where there as well and our plan was to work a bit on our Speakerinnen App. Some advanced coders took their time to go with us trough the code and fixed ALL the tests and showed us, how to keep the overall view on a large (at least for us ;) ) project. Thanks a lot!!!&lt;/p&gt;

&lt;p&gt;On sunday was a railsgirls meeting with the organizers and attendies from cologne and some other Cities, even one Railsgirl from London. The aim of the cologne railgirls was to write anm app for the railsgirls cumminities to help to organize the events. After a lot of talking and brainstorming it was democraticly decided to first focuse on an app to centralize all the rails girls projects. That app should make it easier for interested girls to propose a project, find a project or find a coach for a railsproject. I am looking forward to see it!&lt;/p&gt;

&lt;p&gt;The best coding stuff I learned on the Railscamp was the sublime package githubinator. After installing it, you open your document which has a github repro and click with you right mousebutton on a line in the code and choose &amp;quot;githubinator blame&amp;quot; and tada, there opens the github webseite and you see who of the rubymonsters has been the perpetrator of that piece of code. Nice tool! Always good to know who to blame. &lt;/p&gt;

&lt;p&gt;The funny thing about programmers I learned was, every programmer is recommening something else. And then they start to discuss which way is better. And I end up totally confused.
&lt;a href=&quot;(/images/car_race.gif&quot;&gt;analog computer - the best&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;It was a great weekend! At any time again!&lt;/p&gt;

&lt;p&gt;Anja&lt;/p&gt;
</description>
				<pubDate>Su Jul 28 2013 22:17</pubDate>
				<link>http://inchworms.net/blog/2013-07-28-cologne</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-07-28-cologne</guid>
			</item>
		
			<item>
				<title>Hei√ü!</title>
				<description>&lt;p&gt;The heatwave continues. &lt;/p&gt;

&lt;p&gt;While one inchworm readies herself for data visualising by reading this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://covers.oreilly.com/images/9781449339739/lrg.jpg&quot; alt=&quot;Interactive Data Visualisation for the Web&quot;&gt;&lt;/p&gt;

&lt;p&gt;The other has scopes explained:&lt;/p&gt;

&lt;iframe src=&quot;http://loopc.am/CarlaD/loops/scopes-explained.widget&quot; width=&quot;340&quot; height=&quot;390&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;(Note the dim lighting. It&amp;#39;s so hot in Berlin that even at 9am all the shutters are drawn.)&lt;/p&gt;

&lt;p&gt;It was ice cream for lunch and iced coffee (courtsey of &lt;a href=&quot;https://twitter.com/raphaelawrede&quot;&gt;@raphaelawrede&lt;/a&gt;) for afternoon tea.&lt;/p&gt;

&lt;p&gt;The routing tests continue and, slowly slowly, it feels like comprehension is solidfying.&lt;/p&gt;

&lt;p&gt;Hope everyone has a great weekend. We&amp;#39;re off to find an icebox to move into...&lt;/p&gt;
</description>
				<pubDate>Fri Jul 26 2013 17:17</pubDate>
				<link>http://inchworms.net/blog/2013-07-26-heiss</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-07-26-heiss</guid>
			</item>
		
			<item>
				<title>Brain Strain</title>
				<description>&lt;p&gt;This pretty much sums up today:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/brainstrain.gif&quot; alt=&quot;brain strain&quot;&gt;&lt;/p&gt;
</description>
				<pubDate>Thu Jul 25 2013 21:50</pubDate>
				<link>http://inchworms.net/blog/2013-07-25-brain-strain</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-07-25-brain-strain</guid>
			</item>
		
			<item>
				<title>Sorting and Filing</title>
				<description>&lt;p&gt;Our routing_spec.rb document was getting rather long and confusing. Scrolling up and down it hurt our brains, not to mention had us inserting new tests into wrong contexts. &lt;/p&gt;

&lt;p&gt;So we broke the file up into a bunch of separate files based on contexts. Now our directory structure looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/directoryStructure.png&quot; alt=&quot;spec directory structure&quot;&gt;&lt;/p&gt;

&lt;p&gt;You&amp;#39;ll notice a folder called &amp;#39;unchecked&amp;#39;. This hold the files we&amp;#39;ve already written tests for but need to check (Matt discovered this morning that some of our test, whist passing, are not actually testing for what they should be).&lt;/p&gt;

&lt;p&gt;You&amp;#39;ll also notice some other folders for other types of requests, like put, post, link, etc. We have to finish the get requests first!&lt;/p&gt;

&lt;p&gt;We also learnt that if you list tests without implementing them,  like this...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/testlist.png&quot; alt=&quot;test list&quot;&gt;&lt;/p&gt;

&lt;p&gt;... when you run the test, the output will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pending.png&quot; alt=&quot;pending&quot;&gt;&lt;/p&gt;

&lt;p&gt;That is, the unwritten tests will be listed as &amp;quot;PENDING: Not yet implemented.&amp;quot; Neat, huh!&lt;/p&gt;

&lt;p&gt;Meanwhile, our commits for the day (as of 5pm) look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/comitsJuly24.png&quot; alt=&quot;Commits July 24&quot;&gt;&lt;/p&gt;
</description>
				<pubDate>Wed Jul 24 2013 17:10</pubDate>
				<link>http://inchworms.net/blog/2013-07-23-sorting-filing</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-07-23-sorting-filing</guid>
			</item>
		
			<item>
				<title>Splatting and Slurping</title>
				<description>&lt;p&gt;As &lt;a href=&quot;http://technet.microsoft.com/en-us/magazine/gg675931.aspx&quot;&gt;Don Jones&lt;/a&gt; points out, where else but the IT industry would one use a word like &amp;quot;splatting&amp;quot; in a serious, professional context? Or &amp;quot;slurping&amp;quot; for that matter. &lt;a href=&quot;http://stackoverflow.com/users/196561/osgx&quot;&gt;osgx&lt;/a&gt; explains it like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    In Ruby... [a] parameter of a method may be preceded 
    by an asterisk(*), which is sometimes called the &amp;#39;splat&amp;#39; 
    operator. This indicates that more parameters may be passed 
    to the function. Those parameters are collected up and an 
    array is created.

    The asterisk operator may also precede an Array argument in 
    a method call. In this case the Array will be expanded and 
    the values passed in as if they were separated by commas.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s an example of what splatting can do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    def drink(slurp, *flavour)
      flavour.each { |f| puts &amp;quot;#{f}: #{slurp}&amp;quot; }
    end

    drink(&amp;quot;Slurping!&amp;quot;, &amp;quot;Chocolate&amp;quot;, &amp;quot;Vanilla&amp;quot;, &amp;quot;Strawberry&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will return:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    Chocolate: Slurping!
    Vanilla: Slurping!
    Strawberry: Slurping!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(See &lt;a href=&quot;http://www.jacopretorius.net/2012/01/splat-operator-in-ruby.html&quot;&gt;Jaco Pretorius&lt;/a&gt; for more examples)&lt;/p&gt;

&lt;p&gt;The most common usage of the splat operator is, according to Jaco, slurping up all remaining arguments. But we were splatting Sinatra routes (or at least testing Sinatra&amp;#39;s ability to support splat params). Mmmmm. Juicy.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F102248467&amp;amp;color=ff6600&amp;amp;auto_play=false&amp;amp;show_artwork=false&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In any case, we&amp;#39;re churning through our tests and learning way more about routes, and what web frameworks need to accomodate in URLs, than we ever anticipated. Konstantin made a nice &lt;a href=&quot;https://github.com/inchworms/sinatra_tests/issues/3&quot;&gt;checklist&lt;/a&gt; for us. We are happily ticking off the boxes :-)&lt;/p&gt;
</description>
				<pubDate>Tue Jul 23 2013 17:57</pubDate>
				<link>http://inchworms.net/blog/2013-07-23-splatting</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-07-23-splatting</guid>
			</item>
		
			<item>
				<title>Hitzewelle!</title>
				<description>&lt;p&gt;Berlin. 30 degrees in the shade. Everywhere we look Germans are melting. But not our mentor Stefan, the &lt;a href=&quot;http://news.bbc.co.uk/sportacademy/hi/sa/tennis/features/newsid_3253000/3253694.stm&quot;&gt;Bjorn Borg&lt;/a&gt; of Open Data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/stefan.jpg&quot; alt=&quot;Stefan Wehrmeyer&quot;&gt;&lt;/p&gt;

&lt;p&gt;We met with &lt;a href=&quot;http://stefanwehrmeyer.com/&quot;&gt;Stefan&lt;/a&gt; in the morning to discuss the EU FarmSubsidy project we&amp;#39;ll work on in the later part of our Summer of Code. We covered a lot of ground, discussing possible libraries to use, different software that might be helpful, alternate visual approaches, and formulated a rough plan for how we should initially proceed. (Carla was also happy to find data about her uncle&amp;#39;s small farm in Sicily).&lt;/p&gt;

&lt;p&gt;Then it was back to the Travis CI office to continue with our Sinatra tests. &lt;/p&gt;

&lt;p&gt;The coding was 15% more fun today thanks to glistening nail polish provided by &lt;a href=&quot;https://twitter.com/meivx&quot;&gt;@meivx&lt;/a&gt;. We are thinking of making her our official inchworms stylist.&lt;/p&gt;

&lt;iframe src=&quot;http://loopc.am/CarlaD/loops/15-more-fun.widget&quot; width=&quot;340&quot; height=&quot;390&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We needed more fun because while it may have been the heat, the long list of Sinatra routing tests started to intimidate us. Especially when we realised the list we wrote last week only included the &amp;#39;get&amp;#39; portion of routing requests (not the &amp;#39;post&amp;#39;, &amp;#39;put&amp;#39;, &amp;#39;delete&amp;#39;, &amp;#39;head&amp;#39;, &amp;#39;options&amp;#39;, &amp;#39;patch&amp;#39;, &amp;#39;link&amp;#39;, &amp;#39;unlink&amp;#39; requests). Eeek!&lt;/p&gt;

&lt;p&gt;We found something Matt called a &lt;a href=&quot;http://youtu.be/3ppsDNkBLGY?t=1m1s&quot;&gt;rabbit hole&lt;/a&gt; (to do with disabling Rack protection) and had test results totally splatter our screens with red, as if an RSpec chainsaw had been unleashed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/splatter.png&quot; alt=&quot;splatter&quot;&gt;&lt;/p&gt;

&lt;p&gt;Our work continues...&lt;/p&gt;
</description>
				<pubDate>Mon Jul 22 2013 17:17</pubDate>
				<link>http://inchworms.net/blog/2013-07-22-hitzewelle</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-07-22-hitzewelle</guid>
			</item>
		
			<item>
				<title>Yield! (to my superior knowledge)</title>
				<description>&lt;p&gt;&lt;img src=&quot;/images/metamatt.jpg&quot; alt=&quot;Meta Matt&quot;&gt;&lt;/p&gt;

&lt;p&gt;Do not doubt this man. He will take a statement like &lt;strong&gt;yield&lt;/strong&gt; and break it into meta-programmed chunks. All before breakfast (smells a lot like RGSoC spirit to us ;-))&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Very&lt;/em&gt; simply, a &lt;strong&gt;yield&lt;/strong&gt; statement will invoke a &lt;strong&gt;block&lt;/strong&gt;. This is all you really need to know.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://d24w6bsrhbeh9d.cloudfront.net/photo/ab5ynVp_700b.jpg&quot; alt=&quot;we have no idea what we&amp;#39;re doing&quot;&gt;&lt;/p&gt;

&lt;p&gt;The rest of the day we spent writing the &lt;a href=&quot;https://github.com/inchworms/sinatra_tests/blob/master/spec/routing_spec.rb&quot;&gt;routing spec&lt;/a&gt; for our Sinatra testing and refactoring it all into beautifully contextualised syntax. Here&amp;#39;s a list of the remaining Sinatra routing tests we need to write:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;allows using unicode&lt;/li&gt;
&lt;li&gt;it handles encoded slashes correctly&lt;/li&gt;
&lt;li&gt;overrides the content-type in error handlers&lt;/li&gt;
&lt;li&gt;matches empty PATH_INFO to &amp;quot;/&amp;quot; if no route is defined for &amp;quot;&amp;quot;&lt;/li&gt;
&lt;li&gt;matches empty PATH_INFO to &amp;quot;&amp;quot; if a route is defined for &amp;quot;&amp;quot;&lt;/li&gt;
&lt;li&gt;takes multiple definitions of a route&lt;/li&gt;
&lt;li&gt;exposes params with indifferent hash&lt;/li&gt;
&lt;li&gt;merges named params and query string params in params&lt;/li&gt;
&lt;li&gt;supports optional named params like /?:foo?/?:bar?&lt;/li&gt;
&lt;li&gt;supports named captures like %r{/hello/(?&lt;person&gt;[^/?+ ]+)} on Ruby &amp;gt;= 1.9&lt;/li&gt;
&lt;li&gt;supports optional named captures like %r{/page(?&lt;format&gt;.[^/?+ ]+)?} on Ruby &amp;gt;= 1.9&lt;/li&gt;
&lt;li&gt;does not concatinate params with the same name&lt;/li&gt;
&lt;li&gt;supports single splat params like /*&lt;/li&gt;
&lt;li&gt;supports mixing multiple splat params like /&lt;em&gt;/foo/&lt;/em&gt;/*&lt;/li&gt;
&lt;li&gt;supports mixing named and splat params like /:foo/*&lt;/li&gt;
&lt;li&gt;matches a dot (&amp;#39;.&amp;#39;) as part of a named param&lt;/li&gt;
&lt;li&gt;matches a literal dot (&amp;#39;.&amp;#39;) outside of named params&lt;/li&gt;
&lt;li&gt;literally matches dollar sign in paths&lt;/li&gt;
&lt;li&gt;literally matches plus sign in paths&lt;/li&gt;
&lt;li&gt;does not convert plus sign into space as the value of a named param&lt;/li&gt;
&lt;li&gt;literally matches parens in paths&lt;/li&gt;
&lt;li&gt;supports basic nested params&lt;/li&gt;
&lt;li&gt;exposes nested params with indifferent hash&lt;/li&gt;
&lt;li&gt;exposes params nested within arrays with indifferent hash&lt;/li&gt;
&lt;li&gt;supports arrays within params&lt;/li&gt;
&lt;li&gt;supports deeply nested params&lt;/li&gt;
&lt;li&gt;preserves non-nested params&lt;/li&gt;
&lt;li&gt;matches paths that include spaces encoded with %20&lt;/li&gt;
&lt;li&gt;matches paths that include spaces encoded with +&lt;/li&gt;
&lt;li&gt;matches paths that include ampersands&lt;/li&gt;
&lt;li&gt;URL decodes named parameters and splats&lt;/li&gt;
&lt;li&gt;supports regular expressions&lt;/li&gt;
&lt;li&gt;makes regular expression captures available in params[:captures]&lt;/li&gt;
&lt;li&gt;supports regular expression look-alike routes&lt;/li&gt;
&lt;li&gt;raises a TypeError when pattern is not a String or Regexp&lt;/li&gt;
&lt;li&gt;returns response immediately on halt&lt;/li&gt;
&lt;li&gt;halts with a response tuple&lt;/li&gt;
&lt;li&gt;halts with an array of strings&lt;/li&gt;
&lt;li&gt;sets response.status with halt&lt;/li&gt;
&lt;li&gt;transitions to the next matching route on pass&lt;/li&gt;
&lt;li&gt;transitions to 404 when passed and no subsequent route matches&lt;/li&gt;
&lt;li&gt;transitions to 404 and sets X-Cascade header when passed and no subsequent route matches&lt;/li&gt;
&lt;li&gt;uses optional block passed to pass as route block if no other route is found&lt;/li&gt;
&lt;li&gt;passes when matching condition returns false&lt;/li&gt;
&lt;li&gt;does not pass when matching condition returns nil&lt;/li&gt;
&lt;li&gt;passes to next route when condition calls pass explicitly&lt;/li&gt;
&lt;li&gt;passes to the next route when host_name does not match&lt;/li&gt;
&lt;li&gt;passes to the next route when user_agent does not match&lt;/li&gt;
&lt;li&gt;treats missing user agent like an empty string&lt;/li&gt;
&lt;li&gt;makes captures in user agent pattern available in params[:agent]&lt;/li&gt;
&lt;li&gt;matches mime_types with dots, hyphens and plus signs&lt;/li&gt;
&lt;li&gt;filters by accept header&lt;/li&gt;
&lt;li&gt;filters by current Content-Type&lt;/li&gt;
&lt;li&gt;allows multiple mime types for accept header&lt;/li&gt;
&lt;li&gt;respects user agent preferences for the content type&lt;/li&gt;
&lt;li&gt;accepts generic types&lt;/li&gt;
&lt;li&gt;prefers concrete over partly generic types&lt;/li&gt;
&lt;li&gt;prefers concrete over fully generic types&lt;/li&gt;
&lt;li&gt;prefers partly generic over fully generic types&lt;/li&gt;
&lt;li&gt;respects quality with generic types&lt;/li&gt;
&lt;li&gt;supplies a default quality of 1.0&lt;/li&gt;
&lt;li&gt;orders types with equal quality by parameter count&lt;/li&gt;
&lt;li&gt;ignores the quality parameter when ordering by parameter count&lt;/li&gt;
&lt;li&gt;properly handles quoted strings in parameters&lt;/li&gt;
&lt;li&gt;accepts both text/javascript and application/javascript for js&lt;/li&gt;
&lt;li&gt;accepts both text/xml and application/xml for xml&lt;/li&gt;
&lt;li&gt;passes a single url param as block parameters when one param is specified&lt;/li&gt;
&lt;li&gt;passes multiple params as block parameters when many are specified&lt;/li&gt;
&lt;li&gt;passes regular expression captures as block parameters&lt;/li&gt;
&lt;li&gt;supports mixing multiple splat params like /&lt;em&gt;/foo/&lt;/em&gt;/* as block parameters&lt;/li&gt;
&lt;li&gt;raises an ArgumentError with block arity &amp;gt; 1 and too many values&lt;/li&gt;
&lt;li&gt;raises an ArgumentError with block param arity &amp;gt; 1 and too few values&lt;/li&gt;
&lt;li&gt;succeeds if no block parameters are specified&lt;/li&gt;
&lt;li&gt;passes all params with block param arity -1 (splat args)&lt;/li&gt;
&lt;li&gt;allows custom route-conditions to be set via route options&lt;/li&gt;
&lt;li&gt;raises an ArgumentError with block param arity 1 and no values&lt;/li&gt;
&lt;li&gt;raises an ArgumentError with block param arity 1 and too many values&lt;/li&gt;
&lt;li&gt;matches routes defined in superclasses&lt;/li&gt;
&lt;li&gt;matches routes in subclasses before superclasses&lt;/li&gt;
&lt;li&gt;adds hostname condition when it is in options&lt;/li&gt;
&lt;li&gt;allows using call to fire another request internally&lt;/li&gt;
&lt;li&gt;plays well with other routing middleware&lt;/li&gt;
&lt;li&gt;returns the route signature&lt;/li&gt;
&lt;li&gt;sets env[&amp;#39;sinatra.route&amp;#39;] to the matched route&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you sometime next decade...&lt;/p&gt;
</description>
				<pubDate>Fri Jul 19 2013 16:38</pubDate>
				<link>http://inchworms.net/blog/2013-07-19-yield</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-07-19-yield</guid>
			</item>
		
			<item>
				<title>Getting Get Requests</title>
				<description>&lt;p&gt;First of all, &lt;a href=&quot;https://twitter.com/_ceciliarivero&quot;&gt;Cecilia&lt;/a&gt; from #rgsoc-teams, we hope you&amp;#39;re feeling more yourself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cecilia.png&quot; alt=&quot;cecilia&quot;&gt;&lt;/p&gt;

&lt;p&gt;Secondly, when trying to communicate (to someone remotely) what you&amp;#39;re actually inputing into your terminal, it&amp;#39;s possible to make a video capture of your screen online and send a link to your remote buddy. Just use &lt;a href=&quot;http://ascii.io&quot;&gt;ascii.io&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We weren&amp;#39;t able to access our localhost server using telnet so sent this to Konstantin:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://ascii.io/a/4235.js&quot; id=&quot;asciicast-4235&quot; async&gt;&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Our mistake was failing to simply enter an empty line...&lt;/p&gt;

&lt;p&gt;Why were we doing this? Because yesterday we started writing tests for Sinatra, focusing initially on all the HTTP requests. Using telnet is one way of seeing what the server response is. Useful for us to see what we would be testing for.&lt;/p&gt;

&lt;p&gt;Actually Konstantin hand drew some requests/responses for us yesterday.&lt;/p&gt;

&lt;iframe src=&quot;http://loopc.am/CarlaD/loops/24.widget&quot; width=&quot;340&quot; height=&quot;390&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allowTransparency=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;We also did a bit of reading at lunch from &lt;a href=&quot;http://shop.oreilly.com/product/0636920019664.do&quot;&gt;Sinatra: Up and Running&lt;/a&gt;. It has a nice little &lt;a href=&quot;https://github.com/inchworms/rock_paper_scissors&quot;&gt;example app&lt;/a&gt; in Chapter 1 that lets you play Rock Paper Scissors with your computer. It&amp;#39;s super simple, but very instructive!
&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/booklunch.jpg&quot; alt=&quot;books for lunch&quot;&gt;&lt;/p&gt;

&lt;p&gt;AND we wrote a few tests: GET returns 200 as a status, returns body as string, returns body as array; GET /hello returns the exected route.&lt;/p&gt;

&lt;p&gt;More tomorrow.&lt;/p&gt;
</description>
				<pubDate>Thu Jul 18 2013 14:30</pubDate>
				<link>http://inchworms.net/blog/2013-07-18-get-requests</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-07-18-get-requests</guid>
			</item>
		
			<item>
				<title>Don't Unleash the Stubs!</title>
				<description>&lt;p&gt;Today we watched the rest of Part 2 of PeepCode&amp;#39;s excellent &lt;a href=&quot;https://peepcode.com/products/rspec-ii&quot;&gt;RSpec video tutorial&lt;/a&gt;. This one covered:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The three stages of testing&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automated testing with RSpec&lt;/li&gt;
&lt;li&gt;Manual Testing with QA testing&lt;/li&gt;
&lt;li&gt;Production deployment with customers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;API discovery&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing an example to describe expected output&lt;/li&gt;
&lt;li&gt;Learning how an API works by writing examples&lt;/li&gt;
&lt;li&gt;Using XPath syntax with Nokogiri (although &lt;a href=&quot;https://twitter.com/svenfuchs&quot;&gt;@svenfuchs&lt;/a&gt; suggested using CSS instead)&lt;/li&gt;
&lt;li&gt;Extracting the author name from an RSS feed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Custom Matcher&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extracting a post&amp;#39;s publication date&lt;/li&gt;
&lt;li&gt;Parsing an XML date into a Ruby object&lt;/li&gt;
&lt;li&gt;Writing a custom matcher (see David Chelimsky&amp;#39;s &lt;a href=&quot;https://github.com/dchelimsky/rspec/wiki/custom-matchers&quot;&gt;wiki&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Verifying the parsing of the date object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Configuration Options&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a .rpsec file&lt;/li&gt;
&lt;li&gt;Understanding the options in the rspec command&lt;/li&gt;
&lt;li&gt;Using an alternate report formatter&lt;/li&gt;
&lt;li&gt;Setting custom options as the default&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Retrieving Data&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retreiving data from an external server&lt;/li&gt;
&lt;li&gt;Organising network code for easier testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Stubs &amp;amp; Mocks&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understanding stubs and mocks&lt;/li&gt;
&lt;li&gt;Using paceholder code to make your examples faster and more consistent&lt;/li&gt;
&lt;li&gt;Intercepting network calls with a stub&lt;/li&gt;
&lt;li&gt;Expecting specific methods to be called with a mock&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stub Syntax:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    # Syntax
    my_object.stub(:my_method).and_return(my_data)

    # Usage in this tutorial
    client.stub(:get).and_return(xml)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But don&amp;#39;t forget:&lt;/p&gt;

&lt;p&gt;&lt;img src =&quot;/images/stubs.png&quot; alt=&quot;stubs&quot; width=&quot;600&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Context, Edge Cases, Corner Cases&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing examples for non-successful edge and corner cases&lt;/li&gt;
&lt;li&gt;Organising examples into success and error contexts&lt;/li&gt;
&lt;li&gt;Learning to think about ways things could go wrong&lt;/li&gt;
&lt;li&gt;Discovering errors and anticipating them in your code&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F101261906&amp;amp;color=ff6600&amp;amp;auto_play=false&amp;amp;show_artwork=false&quot;&gt;&lt;/iframe&gt;
</description>
				<pubDate>Wed Jul 17 2013 16:21</pubDate>
				<link>http://inchworms.net/blog/2013-07-17-stubs</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-07-17-stubs</guid>
			</item>
		
			<item>
				<title>Red Green Refactor</title>
				<description>&lt;p&gt;Today we watched an excellent &lt;a href=&quot;https://peepcode.com/products/rspec-i&quot;&gt;video tutorial&lt;/a&gt; by PeepCode to learn more about RSpec. It covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learning the basic concept of the RSpec testing framework&lt;/li&gt;
&lt;li&gt;Learning the syntax of RSpec&lt;/li&gt;
&lt;li&gt;Using Rspec in isolation with a basic Ruby project&lt;/li&gt;
&lt;li&gt;Understanding the &lt;strong&gt;describe&lt;/strong&gt; and &lt;strong&gt;it&lt;/strong&gt; methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some key RSpec syntax:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    expect(thing).to eq &amp;#39;result&amp;#39;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And also:   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understanding the red/green cycle of development&lt;/li&gt;
&lt;li&gt;Implementing the first feature of the application&lt;/li&gt;
&lt;li&gt;Creating a client and giving it a URL&lt;/li&gt;
&lt;li&gt;Using an &lt;a href=&quot;https://plus.google.com/104025798250320128549/posts&quot;&gt;HTTP Client app&lt;/a&gt; to see what a URL returns when sent a request&lt;/li&gt;
&lt;li&gt;Fetching an XML feed&lt;/li&gt;
&lt;li&gt;Parsing the XML of the comments feed&lt;/li&gt;
&lt;li&gt;Using the &lt;strong&gt;let&lt;/strong&gt; method to simplify setup&lt;/li&gt;
&lt;li&gt;Using nested &lt;strong&gt;describe&lt;/strong&gt; blocks&lt;/li&gt;
&lt;li&gt;Organising application code&lt;/li&gt;
&lt;li&gt;Debugging and fixing errors in RSpec code&lt;/li&gt;
&lt;li&gt;Parsing extra fields&lt;/li&gt;
&lt;li&gt;Working with unexpected Unicode input&lt;/li&gt;
&lt;li&gt;Using trivial examples to catch errors and expose assumptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can look at the code on &lt;a href=&quot;https://github.com/inchworms/tutorial_commentsdashboard&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F101281977&amp;amp;color=ff6600&amp;amp;auto_play=false&amp;amp;show_artwork=false&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Then we started working on &lt;a href=&quot;https://peepcode.com/products/rspec-ii&quot;&gt;Part 2&lt;/a&gt; of the PeepCode tutorial, which we&amp;#39;ll finish tomorrow.&lt;/p&gt;

&lt;p&gt;Oh yeah, we had a yummy lunch at &lt;a href=&quot;http:co-up.de&quot;&gt;Co.Up&lt;/a&gt; with Matt and Urs (and Nabil, Andy, and Hannah)...&lt;/p&gt;

&lt;p&gt;&lt;img src =&quot;/images/salad.jpg&quot; alt=&quot;salad&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;...and &lt;a href=&quot;https://twitter.com/bumbledebee&quot;&gt;@bumbledeebee&lt;/a&gt; left us a gift!&lt;/p&gt;

&lt;p&gt;&lt;img src =&quot;/images/bubbles.jpg&quot; alt=&quot;bubbles&quot; width=&quot;400&quot;&gt;&lt;/p&gt;
</description>
				<pubDate>Tue Jul 16 2013 17:24</pubDate>
				<link>http://inchworms.net/blog/2013-07-15-red-green-refactor</link>
				<guid isPermaLink="true">http://inchworms.net/blog/2013-07-15-red-green-refactor</guid>
			</item>
		
	</channel>
</rss>